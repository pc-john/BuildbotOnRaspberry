# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from PCWakerLatentBuildSlave import *
import pcconfig
c['slaves'] = []
for pc in pcconfig.computerList:
   c['slaves'].append(PCWakerLatentBuildSlave(pc.name,'nevim',build_wait_timeout=0,
                                             #keepalive_interval=30 # this is not working in version 0.8.9
                                             ))

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/Rendering-FIT/GPUEngine.git',
        workdir='GPUEngine-src',
        project='GPUEngine',
        branch='master',
        pollinterval=300,
        pollAtLaunch=True))
c['change_source'].append(SVNPoller(
        'svn://svn.code.sf.net/p/gpuengine/deps/MSVC2013-x64',
        cachepath='GPUEngine-deps/cache',
        project='GPUEngine',
        pollinterval=86400,
        pollAtLaunch=True))

gpuEngineCodebases={
   'GPUEngine-src' :{'repository':'https://github.com/Rendering-FIT/GPUEngine.git'},
   'GPUEngine-deps':{'repository':'svn://svn.code.sf.net/p/gpuengine/deps/MSVC2013-x64'},
}

allRepositories={
   r'https://github.com/Rendering-FIT/GPUEngine.git':'GPUEngine-src',
   r'svn://svn.code.sf.net/p/gpuengine/deps/MSVC2013-x64':'GPUEngine-deps',
}

def codebaseGenerator(chdict):
   return allRepositories[chdict['repository']]

c['codebaseGenerator']=codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import *
from buildbot.changes import filter
builders=['build-msvc2015',
          'build-msvc2013',
          'build-mingw']
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name='on change',
                            change_filter=filter.ChangeFilter(project='GPUEngine',branch='master'),
                            codebases=gpuEngineCodebases,
                            treeStableTimer=None,
                            builderNames=builders))
cdb=[]
for x in gpuEngineCodebases.keys():
   cdb.append(CodebaseParameter(codebase=x,
                                repository=FixedParameter(name='repository',default=''),
                                branch=FixedParameter(name='branch',default=''),
                                project=FixedParameter(name='project',default='')))
c['schedulers'].append(ForceScheduler(
                            name='force',
                            builderNames=builders,
                            codebases=[CodebaseParameter(codebase='GPUEngine-src',
                                                         repository=FixedParameter(name='repository',default=''),
                                                         project=FixedParameter(name='project',default='')),
                                       CodebaseParameter(hide=True,codebase='GPUEngine-deps')],
                            reasonString='Forced by web UI',
                            reason=FixedParameter(name='reason',default='web-user'),
                            username=FixedParameter(name='username',default='Web user'),
                            properties=[],
                            buttonName='Start build'))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.source.svn import SVN
from buildbot.steps.shell import ShellCommand,Compile
from CygwinSteps import *

codeDownloadCommand = Git(repourl='https://github.com/Rendering-FIT/GPUEngine.git',
                          mode='full',method='fresh',workdir='code',
                          codebase='GPUEngine-src')
eraseBuildDirCommand = ShellCommand(command='find . -mindepth 1 -delete',workdir='build') # delete reliably everything, outputting error on failures

mingwFactory = BuildFactory()
mingwFactory.addStep(codeDownloadCommand)
mingwFactory.addStep(eraseBuildDirCommand)
mingwFactory.addStep(ShellCommand(command=['/cygdrive/c/Program Files/CMake/bin/cmake.exe','--version']))
mingwFactory.addStep(ShellCommand(command=['/cygdrive/c/Program Files/CMake/bin/cmake.exe',
                                           '-G','MinGW Makefiles',
                                           '-D','GLM_INCLUDE_DIR=c:/buildbot-slave/GPUEngine/deps/MinGW-w64-i686-6.2.0-posix-dwarf/glm',
                                           '../code'],
                                  env={'PATH':'/cygdrive/c/Program Files/mingw-w64/i686-6.2.0-posix-dwarf-rt_v5-rev1/mingw32/bin'}))
mingwFactory.addStep(Compile(command=['mingw32-make.exe','all'],
                             env={'PATH':'/cygdrive/c/Program Files/mingw-w64/i686-6.2.0-posix-dwarf-rt_v5-rev1/mingw32/bin'}))

msvc2013Factory = BuildFactory()
msvc2013Factory.addStep(codeDownloadCommand)
msvc2013Factory.addStep(SVN(repourl='svn://svn.code.sf.net/p/gpuengine/deps/MSVC2013-x64',
                        mode='full',method='fresh',workdir='deps',
                        codebase='GPUEngine-deps'))
msvc2013Factory.addStep(eraseBuildDirCommand)
msvc2013Factory.addStep(ShellCommand(command=['/cygdrive/c/Program Files (x86)/cmake-3.1.0-win32-x86/bin/cmake.exe','--version']))
msvc2013Factory.addStep(ShellCommand(command=['/cygdrive/c/Program Files (x86)/cmake-3.1.0-win32-x86/bin/cmake.exe',
                                              '-G','Visual Studio 12 Win64',
                                              '-D','GPUENGINE_DEPS_CONFIG_FILE:string=../deps/cache.cmake',
                                              '../code']))
#msvc2013Factory.addStep(MsBuild12Cygwin(projectfile='GPUEngine.sln',config='Release',mode='rebuild',
#                                        platform='x64',workdir='build'))

msvc2015Factory = BuildFactory()
msvc2015Factory.addStep(codeDownloadCommand)
msvc2015Factory.addStep(SVN(repourl='svn://svn.code.sf.net/p/gpuengine/deps/MSVC2015-x64',
                        mode='full',method='fresh',workdir='deps',
                        codebase='GPUEngine-deps'))
msvc2015Factory.addStep(eraseBuildDirCommand)
msvc2015Factory.addStep(ShellCommand(command=['/cygdrive/c/Program Files (x86)/cmake-3.1.0-win32-x86/bin/cmake.exe','--version']))
msvc2015Factory.addStep(ShellCommand(command=['/cygdrive/c/Program Files (x86)/cmake-3.1.0-win32-x86/bin/cmake.exe',
                                              '-G','Visual Studio 14 Win64',
                                              '-D','GPUENGINE_DEPS_CONFIG_FILE:string=../deps/cache.cmake',
                                              '../code']))
msvc2015Factory.addStep(MsBuild14Cygwin(projectfile='GPUEngine.sln',config='Release',mode='rebuild',
                                        platform='x64',workdir='build'))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name='build-mingw',
      slavenames=[pcconfig.pcP4.name],
      factory=mingwFactory,
      builddir='GPUEngine-build-mingw',
      slavebuilddir='GPUEngine-build-mingw'))
c['builders'].append(
    BuilderConfig(name='build-msvc2013',
      slavenames=[pcconfig.pcCore2.name],
      factory=msvc2013Factory,
      builddir='GPUEngine-build-msvc2013',
      slavebuilddir='GPUEngine-build-msvc2013'))
c['builders'].append(
    BuilderConfig(name='build-msvc2015',
      slavenames=[pcconfig.pcCore2.name],
      factory=msvc2015Factory,
      builddir='GPUEngine-build-msvc2015',
      slavebuilddir='GPUEngine-build-msvc2015'))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("fit","fit")]),
    gracefulShutdown = False,
    forceBuild = True, # default was 'auth'
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "GPUEngine"
c['titleURL'] = "https://sourceforge.net/projects/GPUEngine"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
